<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vinson-sheep博客</title>
  
  <subtitle>纯粹想赚点小钱钱</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2017-10-26T15:47:20.342Z</updated>
  <id>/</id>
  
  <author>
    <name>Vinson-sheep</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>windows中python读取路径的使用</title>
    <link href="/2017/10/26/windows%E4%B8%ADpython%E8%AF%BB%E5%8F%96%E8%B7%AF%E5%BE%84%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>/2017/10/26/windows中python读取路径的使用/</id>
    <published>2017-10-26T15:40:14.000Z</published>
    <updated>2017-10-26T15:47:20.342Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于我是主攻前端的，一般的页面开发会在windons系统上。然而有不得不写后端的时候，比如前端需要api进行调试。我实际学习的时候，我发现python读取文件在Linux和windows的行为不一样。<br><a id="more"></a></p></blockquote><p>首先，”/“左倾斜是正斜杠,”\”右倾斜是反斜杠,可以记为：除号是正斜杠一般来说对于目录分隔符，Unix和Web用正斜杠/，Windows用反斜杠，但是现在Windows</p><h2 id="目录中的斜杠们"><a href="#目录中的斜杠们" class="headerlink" title="目录中的斜杠们"></a>目录中的斜杠们</h2><p>python读文件需要输入的目录参数，列出以下例子：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">path = <span class="string">r"C:\Windows\temp\readme.txt"</span></div><div class="line">path1 = <span class="string">r"c:\windows\temp\readme.txt"</span></div><div class="line">path2 = <span class="string">"c:\\windows\\temp\\readme.txt"</span></div><div class="line">path3 = <span class="string">"c:/windows/temp/readme.txt"</span></div></pre></td></tr></table></figure></p><p>打开文件函数open()中的参数可以是path也可以是path1、path2、path3。</p><p>path：”\”为字符串中的特殊字符，加上r后变为原始字符串，则不会对字符串中的”\t”、”\r”进行字符串转义</p><p>path1：大小写不影响windows定位到文件</p><p>path3：用正斜杠做目录分隔符也可以转到对应目录，并且在python中path3的方式也省去了反斜杠\转义的烦恼</p><h2 id="正则表达式中的斜杠们"><a href="#正则表达式中的斜杠们" class="headerlink" title="正则表达式中的斜杠们"></a>正则表达式中的斜杠们</h2><p>正则表达式匹配反斜杠”\”，为什么是”\\“或是 r”\“呢？</p><p>因为在正则表达式中\为特殊符号，为了取消它在正则表达式中的特殊意义需要加一个\就变成了\，但是问题又来了，\也是字符串中的特殊字符，所以又要分别对两个\取消其特殊意义，即为\\。Python中有一个原始字符串操作符，用于那些字符串中出现特殊字符，在原始字符串中，没有转义字符和不能打印的字符。这样就可以取消了\在字符串中的转义功能，即r”\“。</p><p>传送门：</p><p><a href="https://zhidao.baidu.com/question/240654949866727964.html" target="_blank" rel="external">python 对反斜杠的处理问题</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;由于我是主攻前端的，一般的页面开发会在windons系统上。然而有不得不写后端的时候，比如前端需要api进行调试。我实际学习的时候，我发现python读取文件在Linux和windows的行为不一样。&lt;br&gt;
    
    </summary>
    
      <category term="后端" scheme="/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="python3" scheme="/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>flask中file.save小坑</title>
    <link href="/2017/10/26/flask%E4%B8%ADfile-save%E5%B0%8F%E5%9D%91/"/>
    <id>/2017/10/26/flask中file-save小坑/</id>
    <published>2017-10-26T15:20:04.000Z</published>
    <updated>2017-10-26T15:30:37.211Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近挖了文件上传的坑，刚开始就遇到了小坑，花了我很多时间去专研这个问题。<br><a id="more"></a></p></blockquote><p><a href="http://docs.jinkan.org/docs/flask/patterns/fileuploads.html" target="_blank" rel="external">flask文档</a>上面有关上传文件的实例，我copy下来，放在本地运行。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, redirect, url_for</div><div class="line"><span class="keyword">from</span> werkzeug <span class="keyword">import</span> secure_filename</div><div class="line"></div><div class="line">UPLOAD_FOLDER = <span class="string">'/path/to/the/uploads'</span></div><div class="line">ALLOWED_EXTENSIONS = set([<span class="string">'txt'</span>, <span class="string">'pdf'</span>, <span class="string">'png'</span>, <span class="string">'jpg'</span>, <span class="string">'jpeg'</span>, <span class="string">'gif'</span>])</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">app.config[<span class="string">'UPLOAD_FOLDER'</span>] = UPLOAD_FOLDER</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">allowed_file</span><span class="params">(filename)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'.'</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</div><div class="line">           filename.rsplit(<span class="string">'.'</span>, <span class="number">1</span>)[<span class="number">1</span>] <span class="keyword">in</span> ALLOWED_EXTENSIONS</div><div class="line"></div><div class="line"><span class="meta">@app.route('/', methods=['GET', 'POST'])</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_file</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</div><div class="line">        file = request.files[<span class="string">'file'</span>]</div><div class="line">        <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</div><div class="line">            filename = secure_filename(file.filename)</div><div class="line">            file.save(os.path.join(app.config[<span class="string">'UPLOAD_FOLDER'</span>], filename))</div><div class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">'uploaded_file'</span>,</div><div class="line">                                    filename=filename))</div><div class="line">    <span class="keyword">return</span> <span class="string">'''</span></div><div class="line"><span class="string">    &lt;!doctype html&gt;</span></div><div class="line"><span class="string">    &lt;title&gt;Upload new File&lt;/title&gt;</span></div><div class="line"><span class="string">    &lt;h1&gt;Upload new File&lt;/h1&gt;</span></div><div class="line"><span class="string">    &lt;form action="" method=post enctype=multipart/form-data&gt;</span></div><div class="line"><span class="string">      &lt;p&gt;&lt;input type=file name=file&gt;</span></div><div class="line"><span class="string">         &lt;input type=submit value=Upload&gt;</span></div><div class="line"><span class="string">    &lt;/form&gt;</span></div><div class="line"><span class="string">    '''</span></div></pre></td></tr></table></figure></p><p>结果出现<code>no such file or directory</code>之类的文字，python是很明确地说明是<code>save.file</code>函数保存文件路径出了问题。</p><p>实际上这个问题网上很多帖子，然而答案很模糊。<strong>实际问题在于就是<code>file.save</code>只接受绝对路径。这个不管是Linux还是windows都是一样的</strong>。</p><p>传送门：<br><a href="http://www.jianshu.com/p/2c97caaf3cf9" target="_blank" rel="external">记录一个Flask文件上传的小坑</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近挖了文件上传的坑，刚开始就遇到了小坑，花了我很多时间去专研这个问题。&lt;br&gt;
    
    </summary>
    
      <category term="后端" scheme="/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="flask" scheme="/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>四种常见的POST提交数据方式</title>
    <link href="/2017/10/26/%E5%9B%9B%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84POST%E6%8F%90%E4%BA%A4%E6%95%B0%E6%8D%AE%E6%96%B9%E5%BC%8F/"/>
    <id>/2017/10/26/四种常见的POST提交数据方式/</id>
    <published>2017-10-26T11:13:59.000Z</published>
    <updated>2017-10-26T15:21:17.952Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近看了一篇文章，相当有启发性，它解决了我对http请求中数据传输格式的困惑。在未来的表单页面制作，通过设置表单enctype属性能够实现更多的功能。上面也提及到json的前端设置，我觉得很有必要做做记录。<br><a id="more"></a></p></blockquote><p><em>title说有四种常见的POST提交数据方式，其实有五种，最后一种不常见而已</em></p><p>这里说到的POST方式，都可以作为数据的描述，使用ajax提交给服务器。</p><h2 id="application-x-www-form-urlencoded"><a href="#application-x-www-form-urlencoded" class="headerlink" title="application/x-www-form-urlencoded"></a>application/x-www-form-urlencoded</h2><p>这应该是最常见的POST提交数据方式了。</p><p>浏览器的原生 form 表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据。请求类似于下面这样（无关的请求头在本文中都省略掉了）：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">POST</span> <span class="string">http://www.example.com</span> HTTP/1.1</div><div class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded;charset=utf-8</div><div class="line"></div><div class="line">title=test&amp;sub%5B%5D=1&amp;sub%5B%5D=2&amp;sub%5B%5D=3</div></pre></td></tr></table></figure></p><h2 id="multipart-form-data"><a href="#multipart-form-data" class="headerlink" title="multipart/form-data"></a>multipart/form-data</h2><p>这又是一个常见的 POST 数据提交的方式。我们使用表单上传文件时，必须让 form 的 enctyped 等于这个值。直接来看一个请求示例：<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="type">POST</span> http://www.example.com <span class="type">HTTP</span>/<span class="number">1.1</span></div><div class="line"><span class="type">Content</span>-<span class="type">Type</span>:multipart/form-<span class="class"><span class="keyword">data</span>; boundary=<span class="comment">----WebKitFormBoundaryrGKCBY7qhFd3TrwA</span></span></div><div class="line"></div><div class="line"><span class="comment">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span></div><div class="line"><span class="type">Content</span>-<span class="type">Disposition</span>: form-<span class="class"><span class="keyword">data</span>; name="text"</span></div><div class="line"></div><div class="line"><span class="title">title</span></div><div class="line"><span class="comment">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span></div><div class="line"><span class="type">Content</span>-<span class="type">Disposition</span>: form-<span class="class"><span class="keyword">data</span>; name="file"; filename="chrome.png"</span></div><div class="line"><span class="type">Content</span>-<span class="type">Type</span>: image/png</div><div class="line"></div><div class="line"><span class="type">PNG</span> ... content <span class="keyword">of</span> chrome.png ...</div><div class="line"><span class="comment">------WebKitFormBoundaryrGKCBY7qhFd3TrwA--</span></div></pre></td></tr></table></figure></p><p>这个例子稍微复杂点。首先生成了一个 boundary 用于分割不同的字段，为了避免与正文内容重复，boundary 很长很复杂。然后 Content-Type 里指明了数据是以 mutipart/form-data 来编码，本次请求的 boundary 是什么内容。消息主体里按照字段个数又分为多个结构类似的部分，每部分都是以 –boundary 开始，紧接着内容描述信息，然后是回车，最后是字段具体内容（文本或二进制）。如果传输的是文件，还要包含文件名和文件类型信息。消息主体最后以 –boundary– 标示结束。</p><p>上面提到的这两种 POST 数据的方式，都是浏览器原生支持的，而且现阶段原生 form 表单也只支持这两种方式。但是随着越来越多的 Web 站点，尤其是 WebApp，全部使用 Ajax 进行数据交互之后，我们完全可以定义新的数据提交方式，给开发带来更多便利。</p><h2 id="application-json"><a href="#application-json" class="headerlink" title="application/json"></a>application/json</h2><p>application/json 这个 Content-Type 作为响应头大家肯定不陌生。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持 JSON.stringify，服务端语言也都有处理 JSON 的函数，使用 JSON 不会遇上什么麻烦。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">POST</span> <span class="string">http://www.example.com</span> HTTP/1.1</div><div class="line"><span class="attribute">Content-Type</span>: application/json;charset=utf-8</div><div class="line"></div><div class="line">&#123;"title":"test","sub":[1,2,3]&#125;</div></pre></td></tr></table></figure></p><h2 id="text-xml"><a href="#text-xml" class="headerlink" title="text/xml"></a>text/xml</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">POST</span> <span class="string">http://www.example.com</span> HTTP/1.1</div><div class="line"><span class="attribute">Content-Type</span>: text/xml</div><div class="line"></div><div class="line">&lt;!--?xml version="1.0"?--&gt;</div><div class="line">&lt;methodcall&gt;</div><div class="line">    &lt;methodname&gt;examples.getStateName&lt;/methodname&gt;</div><div class="line">    &lt;params&gt;</div><div class="line">        &lt;param&gt;</div><div class="line">            &lt;value&gt;&lt;i4&gt;41&lt;/i4&gt;&lt;/value&gt;</div><div class="line"></div><div class="line">    &lt;/params&gt;</div><div class="line">&lt;/methodcall&gt;</div></pre></td></tr></table></figure><p>我个人觉得 XML 结构还是过于臃肿，一般场景用 JSON 会更灵活方便。</p><h2 id="text-plain"><a href="#text-plain" class="headerlink" title="text/plain"></a>text/plain</h2><p>在<a href="http://www.runoob.com/tags/att-form-enctype.html" target="_blank" rel="external">菜鸟教程</a>的描述是：</p><blockquote><p>将空格转换为 “+” 符号，但不编码特殊字符。</p></blockquote><p>其实实际开发中用得非常少，而且资料也不多，在这里不介绍了。</p><p>传送门：</p><p><a href="http://blog.csdn.net/tycoon1988/article/details/40080691" target="_blank" rel="external">application/json 四种常见的 POST 提交数据方式</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近看了一篇文章，相当有启发性，它解决了我对http请求中数据传输格式的困惑。在未来的表单页面制作，通过设置表单enctype属性能够实现更多的功能。上面也提及到json的前端设置，我觉得很有必要做做记录。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="/tags/javascript/"/>
    
      <category term="表单" scheme="/tags/%E8%A1%A8%E5%8D%95/"/>
    
      <category term="html" scheme="/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>python3 datetime与字符串的转换</title>
    <link href="/2017/10/25/python3-datetime%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <id>/2017/10/25/python3-datetime与字符串的转换/</id>
    <published>2017-10-25T14:58:06.000Z</published>
    <updated>2017-10-25T15:11:08.870Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>写后台脚本的时候遇到了，mysql输出给pymysql的数据类型为datetime，而json不能直接将datetime对象转化为string，所以需要通过显式转换将datetime转换为string。<br><a id="more"></a></p></blockquote><h2 id="datetime-gt-string"><a href="#datetime-gt-string" class="headerlink" title="datetime =&gt; string"></a>datetime =&gt; string</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import datetime</div><div class="line"></div><div class="line">date=datetime.datetime.now()</div><div class="line">str=date.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</div><div class="line">str <span class="comment"># =&gt; '2017-10-25 23:04:32'</span></div></pre></td></tr></table></figure><h2 id="string-gt-datetime"><a href="#string-gt-datetime" class="headerlink" title="string =&gt; datetime"></a>string =&gt; datetime</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">import <span class="keyword">time</span></div><div class="line"></div><div class="line">str = <span class="string">'2012-08-29 19:45:57'</span></div><div class="line">date = time.strptime(str, <span class="string">"%Y-%m-%d %H:%M:%S"</span>)</div></pre></td></tr></table></figure><p><strong>在这里有一点甚是奇怪</strong><br>在本地win10上调试，mysql输出的是datetime对象，但是在Ubuntu14上，mysql的datetime输出的东西可以被json化。关于这个差异，博主在写这篇文章的时候，也没能解决。如果有人看到这篇文字，知道原因，可以发邮件给我。</p><p>email: 775014077@qq.com</p><p>传送门：</p><p><a href="http://www.cnblogs.com/finallyliuyu/archive/2012/02/17/2356160.html" target="_blank" rel="external">python time 和datetime类型转换，字符串型变量转成日期型变量</a></p><p><a href="http://blog.sina.com.cn/s/blog_6ffbcfdb01012zga.html" target="_blank" rel="external">python datetime与字符串互转</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;写后台脚本的时候遇到了，mysql输出给pymysql的数据类型为datetime，而json不能直接将datetime对象转化为string，所以需要通过显式转换将datetime转换为string。&lt;br&gt;
    
    </summary>
    
      <category term="后端" scheme="/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="python3" scheme="/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu14.05彻底卸载mysql</title>
    <link href="/2017/10/25/Ubuntu14-05%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BDmysql/"/>
    <id>/2017/10/25/Ubuntu14-05彻底卸载mysql/</id>
    <published>2017-10-25T14:31:20.000Z</published>
    <updated>2017-10-25T14:45:56.780Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我弄mysql的时候把mysql服务停了，发现有些依赖mysql的功能在Mysql服务重启之后就出了点问题。折腾了许久，愤怒之下决定删mysql再重装，可是我发现mysql卸载一点都不容易。特地写下blog,方便以后使用。<br><a id="more"></a></p></blockquote><p>参考了许多文章，只有这一篇可行。（略有改动）</p><p><em>mysql5.7 Ubuntu14</em></p><h2 id="停止mysql服务"><a href="#停止mysql服务" class="headerlink" title="停止mysql服务"></a>停止mysql服务</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/mysql <span class="built_in">stop</span></div></pre></td></tr></table></figure><h2 id="删除mysql的数据文件"><a href="#删除mysql的数据文件" class="headerlink" title="删除mysql的数据文件"></a>删除mysql的数据文件</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rm /var/<span class="class"><span class="keyword">lib</span>/<span class="title">mysql</span>/ -<span class="title">R</span></span></div></pre></td></tr></table></figure><h2 id="删除mysql的配置文件"><a href="#删除mysql的配置文件" class="headerlink" title="删除mysql的配置文件"></a>删除mysql的配置文件</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo <span class="keyword">rm</span> /etc/mysql/ -<span class="built_in">R</span></div></pre></td></tr></table></figure><h2 id="自动卸载mysql（包括server和client）"><a href="#自动卸载mysql（包括server和client）" class="headerlink" title="自动卸载mysql（包括server和client）"></a>自动卸载mysql（包括server和client）</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="builtin-name">get</span> autoremove mysql* --purge</div><div class="line">sudo apt-<span class="builtin-name">get</span> <span class="builtin-name">remove</span> apparmor</div></pre></td></tr></table></figure><h2 id="检查是否卸载干净"><a href="#检查是否卸载干净" class="headerlink" title="检查是否卸载干净"></a>检查是否卸载干净</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dpkg -l | <span class="keyword">grep</span> mysql <span class="comment"># 若没有返回，说明已完成卸载</span></div></pre></td></tr></table></figure><h2 id="接下来安装就是件简单的事情啦"><a href="#接下来安装就是件简单的事情啦" class="headerlink" title="接下来安装就是件简单的事情啦"></a>接下来安装就是件简单的事情啦</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get <span class="keyword">install</span> mysql-<span class="keyword">server</span> mysql-<span class="keyword">client</span></div></pre></td></tr></table></figure><p>这样默认安装的是mysql 5.5的版本，后续尝试安装mysql5.7，稍后补充5.7的安装。</p><p>传送门：</p><p><a href="http://blog.csdn.net/qq_25730711/article/details/53503959" target="_blank" rel="external">mysql-ubuntu14.04彻底卸载mysql</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我弄mysql的时候把mysql服务停了，发现有些依赖mysql的功能在Mysql服务重启之后就出了点问题。折腾了许久，愤怒之下决定删mysql再重装，可是我发现mysql卸载一点都不容易。特地写下blog,方便以后使用。&lt;br&gt;
    
    </summary>
    
      <category term="后端" scheme="/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="转载" scheme="/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="mysql" scheme="/tags/mysql/"/>
    
      <category term="Ubuntu" scheme="/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu14mysq5.7不支持中文问题</title>
    <link href="/2017/10/25/Ubuntu14mysq5-7%E4%B8%8D%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87%E9%97%AE%E9%A2%98/"/>
    <id>/2017/10/25/Ubuntu14mysq5-7不支持中文问题/</id>
    <published>2017-10-25T12:48:51.000Z</published>
    <updated>2017-10-25T13:27:58.982Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不得不说，用mysql坑很多，首先就是编码问题。按照网上搜到的答案来处理，很多次我都不能restart mysql了。最后发现是版本问题，在这里我得做文章记录一下。<br><a id="more"></a></p></blockquote><p>mysql本身是不支持中文的，这个我在win10搭建的服务器也碰到过。想要mysql支持中文，就需要更改它的设置。</p><p><em>请看完这篇文章再动手</em></p><p><em>mysql5.7 Ubuntu14.05</em></p><p>首先停下mysql服务：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /etc/init.d/mysql <span class="built_in">stop</span></div></pre></td></tr></table></figure></p><p>然后用gedit打开mysql配置文件<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gedit /etc/mysql/<span class="keyword">my</span>.cnf</div></pre></td></tr></table></figure></p><p>[client]下添加：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">default</span>-character-<span class="keyword">set</span>=utf8</div></pre></td></tr></table></figure></p><p>[mysqld]下添加：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">default</span>-character-<span class="keyword">set</span>=utf8</div></pre></td></tr></table></figure></p><p>保存退出</p><p>重启mysql服务<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo<span class="built_in"> service </span>mysql restart</div></pre></td></tr></table></figure></p><p>然而…<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Job failed <span class="built_in">to</span> <span class="built_in">start</span></div></pre></td></tr></table></figure></p><p>问题在哪呢？</p><blockquote><p>可能是版本的问题，查5.5以后的版本对字符编码方式修改的办法，发现[mysqld]修改方法变了：</p></blockquote><p>[mysqld]下添加的应该为：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">character-set-server</span>=utf8</div><div class="line"></div><div class="line"><span class="attr">collation-server</span>=utf8_general_ci</div></pre></td></tr></table></figure></p><p>保存退出<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo<span class="built_in"> service </span>mysql restart</div></pre></td></tr></table></figure></p><p>成功</p><p>查看字符集<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mysql&gt; show variables like <span class="emphasis">'%char%'</span>;</div><div class="line"><span class="code">+--------------------------+</span>----------------------------+</div><div class="line">| Variable<span class="emphasis">_name            | Value                      |</span></div><div class="line"><span class="emphasis">+--------------------------+----------------------------+</span></div><div class="line"><span class="emphasis">| character_</span>set<span class="emphasis">_client     | utf8                       |</span></div><div class="line"><span class="emphasis">| character_</span>set<span class="emphasis">_connection | utf8                       |</span></div><div class="line"><span class="emphasis">| character_</span>set<span class="emphasis">_database   | utf8                       |</span></div><div class="line"><span class="emphasis">| character_</span>set<span class="emphasis">_filesystem | binary                     |</span></div><div class="line"><span class="emphasis">| character_</span>set<span class="emphasis">_results    | utf8                       |</span></div><div class="line"><span class="emphasis">| character_</span>set<span class="emphasis">_server     | utf8                       |</span></div><div class="line"><span class="emphasis">| character_</span>set<span class="emphasis">_system     | utf8                       |</span></div><div class="line"><span class="emphasis">| character_</span>sets<span class="emphasis">_dir       | /usr/share/mysql/charsets/ |</span></div><div class="line"><span class="emphasis">+--------------------------+----------------------------+</span></div><div class="line"><span class="emphasis">8 rows in set (0.00 sec)</span></div></pre></td></tr></table></figure></p><p>传送们：</p><p><a href="https://www.2cto.com/database/201509/443147.html" target="_blank" rel="external">参考资料1——Ubuntu15下mysql5.6.25解决不支持中文的办法</a></p><p><a href="https://www.2cto.com/database/201207/139548.html" target="_blank" rel="external">参考资料2——修改mysql字符编码出现Job failed to start解决办法</a></p><p><a href="http://www.linuxidc.com/Linux/2009-05/20163.htm" target="_blank" rel="external">参考资料3——Ubuntu MySQL插入中文出错</a></p>]]></content>
    
    <summary type="html">
    
      no
    
    </summary>
    
      <category term="后端" scheme="/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="mysql" scheme="/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>CSS3中user-select的使用</title>
    <link href="/2017/10/22/CSS3%E4%B8%ADuser-select%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>/2017/10/22/CSS3中user-select的使用/</id>
    <published>2017-10-22T07:25:33.000Z</published>
    <updated>2017-10-22T07:39:24.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h2><p>user-select：none | text | all | element<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">默认值：<span class="built_in">text</span></div><div class="line">适用于：除替换元素外的所有元素</div><div class="line">继承性：无</div><div class="line">动画性：否</div><div class="line">计算值：指定值</div></pre></td></tr></table></figure></p><h2 id="取值："><a href="#取值：" class="headerlink" title="取值："></a>取值：</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="literal">none</span>：</div><div class="line">文本不能被选择</div><div class="line"><span class="keyword">text</span>：</div><div class="line">可以选择文本</div><div class="line">all：</div><div class="line">当所有内容作为一个整体时可以被选择。如果双击或者在上下文上点击子元素，那么被选择的部分将是以该子元素向上回溯的最高祖先元素。</div><div class="line"><span class="keyword">element</span>：</div><div class="line">可以选择文本，但选择范围受元素边界的约束</div></pre></td></tr></table></figure><h2 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h2><p>设置或检索是否允许用户选中文本。</p><p>IE6-9不支持该属性，但支持使用标签属性 onselectstart=”return false;” 来达到 user-select:none 的效果；Safari和Chrome也支持该标签属性；</p><p>直到Opera12.5仍然不支持该属性，但和IE6-9一样，也支持使用私有的标签属性 unselectable=”on” 来达到 user-select:none 的效果；unselectable 的另一个值是 off；</p><p>除Chrome和Safari外，在其它浏览器中，如果将文本设置为 -ms-user-select:none;，则用户将无法在该文本块中开始选择文本。不过，如果用户在页面的其他区域开始选择文本，则用户仍然可以继续选择将文本设置为 -ms-user-select:none; 的区域文本；</p><p>对应的脚本特性为userSelect。</p><h2 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cmn-Hans"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>user-select_CSS参考手册_web前端开发参考手册系列<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"Joy Du(飘零雾雨), dooyoe@gmail.com, www.doyoe.com"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-class">.test</span>&#123;<span class="attribute">padding</span>:<span class="number">10px</span>;<span class="attribute">-webkit-user-select</span>:none;<span class="attribute">-moz-user-select</span>:none;<span class="attribute">-o-user-select</span>:none;<span class="attribute">user-select</span>:none;<span class="attribute">background</span>:<span class="number">#eee</span>;&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span> <span class="attr">onselectstart</span>=<span class="string">"return false;"</span> <span class="attr">unselectable</span>=<span class="string">"on"</span>&gt;</span>选择我试试，你会发现怎么也选择不到我，哈哈哈哈<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p>传说门<br><a href="http://www.css88.com/book/css/properties/user-interface/user-select.htm" target="_blank" rel="external">user-select</a></p>]]></content>
    
    <summary type="html">
    
      no
    
    </summary>
    
      <category term="前端" scheme="/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="/tags/CSS/"/>
    
      <category term="CSS3" scheme="/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>jquery插件blindify详解</title>
    <link href="/2017/10/22/jquery%E6%8F%92%E4%BB%B6blindify%E8%AF%A6%E8%A7%A3/"/>
    <id>/2017/10/22/jquery插件blindify详解/</id>
    <published>2017-10-22T05:58:19.000Z</published>
    <updated>2017-10-22T06:18:28.749Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>百叶窗插件，因为使用的是jquery，所以兼容大部分浏览器，ie兼容9+。<br><a id="more"></a></p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ohkgqh4gv.bkt.clouddn.com/1508652225%281%29.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>Blindify 是一个基于 jQuery 的百叶窗幻灯片插件，它能够非常方便的制作一个漂亮的百叶窗效果，你还可以设置百叶窗的片数、间隔、宽度、高度以及各种动画效果的时间和百叶窗的方向——水平或垂直。</p><h2 id="兼容"><a href="#兼容" class="headerlink" title="兼容"></a>兼容</h2><h3 id="jQuery-兼容"><a href="#jQuery-兼容" class="headerlink" title="jQuery 兼容"></a>jQuery 兼容</h3><p>兼容 1.4+。</p><h3 id="浏览器兼容"><a href="#浏览器兼容" class="headerlink" title="浏览器兼容"></a>浏览器兼容</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ohkgqh4gv.bkt.clouddn.com/1508652357%281%29.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>1、 引入文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/blindify.min.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-1.8.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.blindify.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p><p>2、 HTML<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"blindify"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/photo_1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/photo_2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/photo_3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/photo_4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p>或者带有链接：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"blindify"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.dowebok.com/"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/photo_1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.dowebok.com/"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/photo_2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.dowebok.com/"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/photo_3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.dowebok.com/"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/photo_4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><p>3、JavaScript<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'#blindify'</span>).blindify();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>配置</p><table><thead><tr><th>属性/方法</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>numberOfBlinds</td><td>整数</td><td>20</td><td>百叶窗叶片个数</td></tr><tr><td>slideVisibleTime</td><td>整数</td><td>2000</td><td>每个幻灯片的停留时间，不包括动画时间，以毫秒为单位</td></tr><tr><td>color</td><td>字符串</td><td>#000000</td><td>幻灯片背景颜色（十六进制颜色）</td></tr><tr><td>margin</td><td>整数</td><td>2</td><td>百叶窗之间的距离，以像素（px）为单位。注意：其实是每个百叶窗的边框，所以如果想设置距离为10px，只需设置一半5px</td></tr><tr><td>width</td><td>整数</td><td>960</td><td>容器的宽度，应与图片的宽度一样，以像素为单位</td></tr><tr><td>height</td><td>整数</td><td>600</td><td>容器的高度，应与图片的宽度一样，以像素为单位</td></tr><tr><td>gap</td><td>整数</td><td>100</td><td>百叶窗与容器边缘的距离范围，以像素为单位</td></tr><tr><td>animationSpeed</td><td>整数</td><td>100</td><td>幻灯片动画过度时间</td></tr><tr><td>delayBetweenSlides</td><td>整数</td><td>500</td><td>每个幻灯片切换之间的间隔，以毫秒为单位</td></tr><tr><td>hasLinks</td><td>布尔值</td><td>false</td><td>是否有链接</td></tr><tr><td>orientation</td><td>字符串</td><td>vertical</td><td>百叶窗的方向，可选水平（horizontal）或垂直（vertical），默认为垂直</td></tr><tr><td>startClosed</td><td>布尔值</td><td>false</td><td>百叶窗开始时是否关闭</td></tr><tr><td>firstOpenDelay</td><td>整数</td><td>500</td><td>startClosed 为 true 时，百叶窗延迟打开时间，单位为毫秒</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      no
    
    </summary>
    
      <category term="前端" scheme="/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="jquery" scheme="/tags/jquery/"/>
    
      <category term="jquery插件" scheme="/tags/jquery%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>css更改表单控件光标颜色</title>
    <link href="/2017/10/22/css%E6%9B%B4%E6%94%B9%E8%A1%A8%E5%8D%95%E6%8E%A7%E4%BB%B6%E5%85%89%E6%A0%87%E9%A2%9C%E8%89%B2/"/>
    <id>/2017/10/22/css更改表单控件光标颜色/</id>
    <published>2017-10-21T16:35:50.000Z</published>
    <updated>2017-10-21T16:42:53.407Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>看到一个比较新颖的文章，记录一下。<br><a id="more"></a></p></blockquote><p>一般表单控件光标的颜色跟color属性是一致的。</p><p>如果想仅仅改变光标颜色，需要特殊的CSS设置。</p><p>一直以来要实现这样的效果都是依靠模拟来实现。主要借助于CSS的<code>`-webkit-text-fill-color</code>让文本变成镂空的，即把其设置为<code>transparent</code>，记住了，不是直接将color的值设置为<code>transparent</code>。除此之外，还需要借助<code>text-shadow</code>的威力。直接上代码吧：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.form-control</span> &#123;</div><div class="line">    <span class="attribute">color</span>: red <span class="meta">!important</span>;</div><div class="line">    <span class="attribute">text-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span> <span class="number">#495057</span>;</div><div class="line">    <span class="attribute">-webkit-text-fill-color</span>: transparent;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>到今天为止，我们不需要这么蛋疼了。CSS提供了一个属性<code>caret-color</code>，可以直接让我们控制input和textarea控件的光标颜色，甚至是可编辑的HTML元素，像这样的<code>&lt;div contenteditable&gt;</code>。如此一来，只需要在样式中添加：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span>,</div><div class="line"><span class="selector-tag">textarea</span>,</div><div class="line"><span class="selector-attr">[contenteditable]</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#495057</span>; <span class="comment">/* 文本颜色 */</span></div><div class="line">    <span class="attribute">caret-color</span>: red; <span class="comment">/* 光标颜色 */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>caret-color</code>较三行代码兼容性差些。</p><p>传送门：<br><a href="http://www.w3cplus.com/css/caret-color.html" target="_blank" rel="external">如何改变表单控件光标颜色</a></p>]]></content>
    
    <summary type="html">
    
      no
    
    </summary>
    
      <category term="前端" scheme="/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="/tags/CSS/"/>
    
      <category term="CSS3" scheme="/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>CSS3弹性盒子Flex Box</title>
    <link href="/2017/10/21/CSS3%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90Flex-Box/"/>
    <id>/2017/10/21/CSS3弹性盒子Flex-Box/</id>
    <published>2017-10-20T16:52:35.000Z</published>
    <updated>2017-10-20T16:54:17.561Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>CSS3中flexBox其实也是一个大的领域，下面我为flexBox做简单的归纳。<br><a id="more"></a></p></blockquote><h1 id="CSS3-弹性盒子-Flex-Box"><a href="#CSS3-弹性盒子-Flex-Box" class="headerlink" title="CSS3 弹性盒子(Flex Box)"></a>CSS3 弹性盒子(Flex Box)</h1>]]></content>
    
    <summary type="html">
    
      no
    
    </summary>
    
      <category term="前端" scheme="/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="/tags/CSS/"/>
    
      <category term="CSS3" scheme="/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>CSS3收集</title>
    <link href="/2017/10/21/CSS3%E6%94%B6%E9%9B%86/"/>
    <id>/2017/10/21/CSS3收集/</id>
    <published>2017-10-20T16:41:41.000Z</published>
    <updated>2017-10-22T05:28:00.636Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>收集了一些比较好、有价值的CSS组件源码，供学习使用。<br><a id="more"></a></p></blockquote><h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><ul><li><a href="http://www.runoob.com/try/try.php?filename=trycss_buttons_animate1" target="_blank" rel="external">鼠标移动到按钮上后添加箭头标记</a></li><li><a href="http://www.runoob.com/try/try.php?filename=trycss_buttons_animate2" target="_blank" rel="external">波纹效果</a></li><li><a href="http://www.runoob.com/try/try.php?filename=trycss_buttons_animate3" target="_blank" rel="external">按压效果</a></li></ul><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><ul><li><a href="http://www.runoob.com/try/try.php?filename=trycss_ex_images_card" target="_blank" rel="external">响应式卡片</a></li><li><a href="http://www.runoob.com/try/try.php?filename=trycss_image_modal_js" target="_blank" rel="external">图片模态框</a></li></ul><h2 id="幻灯片"><a href="#幻灯片" class="headerlink" title="幻灯片"></a>幻灯片</h2><ul><li><a href="http://www.dowebok.com/486.html" target="_blank" rel="external">制作简单的响应式幻灯片</a></li><li><a href="http://www.dowebok.com/111.html" target="_blank" rel="external">Blindify – jQuery百叶窗幻灯片插件</a></li></ul>]]></content>
    
    <summary type="html">
    
      no
    
    </summary>
    
      <category term="前端" scheme="/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="/tags/CSS/"/>
    
      <category term="CSS3" scheme="/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>讨论CSS伪元素的父元素</title>
    <link href="/2017/10/20/%E8%AE%A8%E8%AE%BACSS%E4%BC%AA%E5%85%83%E7%B4%A0%E7%9A%84%E7%88%B6%E5%85%83%E7%B4%A0/"/>
    <id>/2017/10/20/讨论CSS伪元素的父元素/</id>
    <published>2017-10-20T15:33:52.000Z</published>
    <updated>2017-10-20T15:56:34.820Z</updated>
    
    <content type="html"><![CDATA[<p>为什么要讨论css中伪元素的父元素呢？因为很多时候需要用到position属性，而position属性效果跟父元素直接挂钩。这篇文章就是讨论CSS中伪元素的父元素到底是谁？<br><a id="more"></a></p><h2 id="什么是伪元素？"><a href="#什么是伪元素？" class="headerlink" title="什么是伪元素？"></a>什么是伪元素？</h2><p>参考<a href="http://www.runoob.com/css/css-pseudo-elements.html" target="_blank" rel="external">菜鸟教程</a>列出所有的伪元素</p><ul><li>:link</li><li>:visited</li><li>:active</li><li>:focus</li><li>:first-letter</li><li>:first-line</li><li>:first-child</li><li>:before</li><li>:after</li><li>lang(language)</li></ul><h2 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h2><p>以<code>:first-letter</code>写一段html和css：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// html</div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span>假猪套天下第一<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">// css</div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-id">#test</span> &#123;</span></div><div class="line"><span class="undefined">    font-size: 15px;  </span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="css"><span class="selector-id">#test</span><span class="selector-pseudo">:first-letter</span> &#123;</span></div><div class="line"><span class="undefined">    font-size: 20px;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure></p><p>在浏览器中测试以上代码：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ohkgqh4gv.bkt.clouddn.com/1508514453%281%29.png" alt="测试结果" title="">                </div>                <div class="image-caption">测试结果</div>            </figure><p>很明显，<code>#test:first-letter</code>覆盖了<code>#test</code>的CSS样式。</p><p>所以<code>#test:first-letter</code>是<code>#test</code>的子元素。</p><p>神马？证明还不够充分？再来！</p><h2 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h2><p>拿<a href="http://www.runoob.com/try/try.php?filename=trycss_buttons_animate1" target="_blank" rel="external">菜鸟教程</a>的一个例子：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-class">.button</span> &#123;</span></div><div class="line"><span class="undefined">  display: inline-block;</span></div><div class="line"><span class="undefined">  border-radius: 4px;</span></div><div class="line"><span class="css">  <span class="selector-tag">background-color</span>: <span class="selector-id">#f4511e</span>;</span></div><div class="line"><span class="undefined">  border: none;</span></div><div class="line"><span class="css">  <span class="selector-tag">color</span>: <span class="selector-id">#FFFFFF</span>;</span></div><div class="line"><span class="undefined">  text-align: center;</span></div><div class="line"><span class="undefined">  font-size: 28px;</span></div><div class="line"><span class="undefined">  padding: 20px;</span></div><div class="line"><span class="undefined">  width: 200px;</span></div><div class="line"><span class="css">  <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 0<span class="selector-class">.5s</span>;</span></div><div class="line"><span class="undefined">  cursor: pointer;</span></div><div class="line"><span class="undefined">  margin: 5px;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-class">.button</span> <span class="selector-tag">span</span> &#123;</span></div><div class="line"><span class="undefined">  cursor: pointer;</span></div><div class="line"><span class="undefined">  display: inline-block;</span></div><div class="line"><span class="undefined">  position: relative;</span></div><div class="line"><span class="css">  <span class="selector-tag">transition</span>: 0<span class="selector-class">.5s</span>;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-class">.button</span> <span class="selector-tag">span</span><span class="selector-pseudo">:after</span> &#123;</span></div><div class="line"><span class="undefined">  content: '»';</span></div><div class="line"><span class="undefined">  position: absolute;</span></div><div class="line"><span class="undefined">  opacity: 0;</span></div><div class="line"><span class="undefined">  top: 0;</span></div><div class="line"><span class="undefined">  right: -20px;</span></div><div class="line"><span class="css">  <span class="selector-tag">transition</span>: 0<span class="selector-class">.5s</span>;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-class">.button</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">span</span> &#123;</span></div><div class="line"><span class="undefined">  padding-right: 25px;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="css"><span class="selector-class">.button</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">span</span><span class="selector-pseudo">:after</span> &#123;</span></div><div class="line"><span class="undefined">  opacity: 1;</span></div><div class="line"><span class="undefined">  right: 0;</span></div><div class="line"><span class="undefined">&#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>按钮动画<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button"</span> <span class="attr">style</span>=<span class="string">"vertical-align:middle"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>Hover<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>仔细观察<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.button</span> <span class="selector-tag">span</span><span class="selector-pseudo">:after</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>和<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.button</span> <span class="selector-tag">span</span> &#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>就relative和absolute的前后关系，可以直接表明<code>span</code>是<code>span:after</code>的父元素。</p>]]></content>
    
    <summary type="html">
    
      no
    
    </summary>
    
      <category term="前端" scheme="/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="/tags/CSS/"/>
    
      <category term="原创" scheme="/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>CSS3新元素使用列表</title>
    <link href="/2017/10/20/CSS3%E6%96%B0%E5%85%83%E7%B4%A0%E4%BD%BF%E7%94%A8%E5%88%97%E8%A1%A8/"/>
    <id>/2017/10/20/CSS3新元素使用列表/</id>
    <published>2017-10-19T16:01:12.000Z</published>
    <updated>2017-10-20T16:52:11.300Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近想做一些UI组件，稍微复习一下CSS3的内容。<br><a id="more"></a></p></blockquote><h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><p>border-radius<br>box-shadow<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">5px</span> <span class="number">#888888</span>;</div></pre></td></tr></table></figure></p><p>border-image<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-webkit-<span class="built_in">border</span>-<span class="built_in">image</span>: url(<span class="built_in">border</span>.png) <span class="number">30</span> <span class="built_in">round</span>; <span class="comment">/* Safari 3.1-5 */</span></div><div class="line">-o-<span class="built_in">border</span>-<span class="built_in">image</span>: url(<span class="built_in">border</span>.png) <span class="number">30</span> <span class="built_in">round</span>; <span class="comment">/* Opera 11-12.1 */</span></div><div class="line"><span class="built_in">border</span>-<span class="built_in">image</span>: url(<span class="built_in">border</span>.png) <span class="number">30</span> <span class="built_in">round</span>;</div></pre></td></tr></table></figure></p><h3 id="圆角"><a href="#圆角" class="headerlink" title="圆角"></a>圆角</h3><p>border-radius</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>background-image<br>background-size<br>background-origin<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">background</span>-size:<span class="number">100</span><span class="symbol">%</span> <span class="number">100</span><span class="symbol">%</span>;</div><div class="line"><span class="built_in">background</span>-<span class="built_in">origin</span>:<span class="built_in">content</span>-<span class="built_in">box</span>;</div></pre></td></tr></table></figure></p><p>background-clip<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">background</span>-clip: <span class="built_in">content</span>-<span class="built_in">box</span>;</div></pre></td></tr></table></figure></p><h3 id="渐变（Gradients）"><a href="#渐变（Gradients）" class="headerlink" title="渐变（Gradients）"></a>渐变（Gradients）</h3><p><a href="http://www.runoob.com/css3/css3-gradients.html" target="_blank" rel="external">传送门</a></p><h3 id="文本效果"><a href="#文本效果" class="headerlink" title="文本效果"></a>文本效果</h3><p>text-shadow<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">text-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">#FF0000</span>;</div></pre></td></tr></table></figure></p><p>box-shadow<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">box-shadow: </span><span class="number">10</span>px <span class="number">10</span>px grey<span class="comment">;</span></div></pre></td></tr></table></figure></p><p>text-overflow<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">text</span>-<span class="built_in">overflow</span>:ellipsis;</div></pre></td></tr></table></figure></p><p>word-wrap<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">word</span>-wrap:<span class="built_in">break</span>-<span class="keyword">word</span>;</div></pre></td></tr></table></figure></p><p>word-break<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">word-<span class="keyword">break</span>:keep-all;</div><div class="line">word-<span class="keyword">break</span>:<span class="keyword">break</span>-all;</div></pre></td></tr></table></figure></p><h3 id="font-face-规则"><a href="#font-face-规则" class="headerlink" title="@font-face 规则"></a>@font-face 规则</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">font-face</span></div><div class="line">&#123;</div><div class="line">    <span class="attribute">font-family</span>: myFirstFont;</div><div class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(sansation_bold.woff);</div><div class="line">    <span class="attribute">font-weight</span>:bold;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="2D-转换"><a href="#2D-转换" class="headerlink" title="2D 转换"></a>2D 转换</h3><p>translate()<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">transform</span>: <span class="built_in">translate</span>(50px,100px);</div><div class="line">-ms-<span class="built_in">transform</span>: <span class="built_in">translate</span>(50px,100px); <span class="comment">/* IE 9 */</span></div><div class="line">-webkit-<span class="built_in">transform</span>: <span class="built_in">translate</span>(50px,100px); <span class="comment">/* Safari and Chrome */</span></div></pre></td></tr></table></figure></p><p>rotate()<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">transform</span>: rotate(<span class="number">30deg</span>);</div><div class="line">-ms-<span class="attribute">transform</span>: rotate(<span class="number">30deg</span>); <span class="comment">/* IE 9 */</span></div><div class="line">-webkit-<span class="attribute">transform</span>: rotate(<span class="number">30deg</span>); <span class="comment">/* Safari and Chrome */</span></div></pre></td></tr></table></figure></p><p>scale()<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-ms-<span class="built_in">transform</span>:<span class="built_in">scale</span>(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">/* IE 9 */</span></div><div class="line">-webkit-<span class="built_in">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">/* Safari */</span></div><div class="line"><span class="built_in">transform</span>: <span class="built_in">scale</span>(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">/* 标准语法 */</span></div></pre></td></tr></table></figure></p><p>skew()<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">transform: skew(<span class="number">30d</span>eg,<span class="number">20d</span>eg);</div><div class="line">-ms-transform: skew(<span class="number">30d</span>eg,<span class="number">20d</span>eg); <span class="comment">/* IE 9 */</span></div><div class="line">-webkit-transform: skew(<span class="number">30d</span>eg,<span class="number">20d</span>eg); <span class="comment">/* Safari and Chrome */</span></div></pre></td></tr></table></figure></p><p>matrix()<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:matrix(0.866</span>,0<span class="selector-class">.5</span>,<span class="selector-tag">-0</span><span class="selector-class">.5</span>,0<span class="selector-class">.866</span>,0,0);</div><div class="line"><span class="selector-tag">-ms-transform</span><span class="selector-pseudo">:matrix(0.866</span>,0<span class="selector-class">.5</span>,<span class="selector-tag">-0</span><span class="selector-class">.5</span>,0<span class="selector-class">.866</span>,0,0); <span class="comment">/* IE 9 */</span></div><div class="line"><span class="selector-tag">-webkit-transform</span><span class="selector-pseudo">:matrix(0.866</span>,0<span class="selector-class">.5</span>,<span class="selector-tag">-0</span><span class="selector-class">.5</span>,0<span class="selector-class">.866</span>,0,0); <span class="comment">/* Safari and Chrome */</span></div></pre></td></tr></table></figure></p><h3 id="3D方法"><a href="#3D方法" class="headerlink" title="3D方法"></a>3D方法</h3><p>rotateX()<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">transform</span>: rotateX(<span class="number">120deg</span>);</div><div class="line">-webkit-<span class="attribute">transform</span>: rotateX(<span class="number">120deg</span>); <span class="comment">/* Safari 与 Chrome */</span></div></pre></td></tr></table></figure></p><p>rotateY()</p><h3 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">transition: width <span class="number">2s</span>, height <span class="number">2s</span>, transform <span class="number">2s</span>;</div><div class="line">-webkit-transition: width <span class="number">2s</span>, height <span class="number">2s</span>, -webkit-transform <span class="number">2s</span>;</div></pre></td></tr></table></figure><p>所有属性<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">transition-property</span>: width;</div><div class="line"><span class="attribute">transition-duration</span>: <span class="number">1s</span>;</div><div class="line"><span class="attribute">transition-timing-function</span>: linear;</div><div class="line"><span class="attribute">transition-delay</span>: <span class="number">2s</span>;</div><div class="line"><span class="comment">/* Safari */</span></div><div class="line">-webkit-<span class="attribute">transition-property</span>:width;</div><div class="line">-webkit-<span class="attribute">transition-duration</span>:<span class="number">1s</span>;</div><div class="line">-webkit-<span class="attribute">transition-timing-function</span>:linear;</div><div class="line">-webkit-<span class="attribute">transition-delay</span>:<span class="number">2s</span>;</div></pre></td></tr></table></figure></p><h3 id="keyframes-规则"><a href="#keyframes-规则" class="headerlink" title="@keyframes 规则"></a>@keyframes 规则</h3><p>动画<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 应用</span></div><div class="line"><span class="selector-tag">div</span></div><div class="line">&#123;</div><div class="line">    <span class="attribute">animation</span>: myfirst <span class="number">5s</span> linear <span class="number">2s</span> infinite alternate;</div><div class="line">    <span class="comment">/* Safari 与 Chrome: */</span></div><div class="line">    -webkit-<span class="attribute">animation</span>: myfirst <span class="number">5s</span> linear <span class="number">2s</span> infinite alternate;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 简写</span></div><div class="line">@keyframes myfirst</div><div class="line">&#123;</div><div class="line">    from &#123;<span class="attribute">background</span>: red;&#125;</div><div class="line">    to &#123;<span class="attribute">background</span>: yellow;&#125;</div><div class="line">&#125;</div><div class="line">@-webkit-keyframes myfirst /* Safari 与 Chrome */</div><div class="line">&#123;</div><div class="line">    from &#123;<span class="attribute">background</span>: red;&#125;</div><div class="line">    to &#123;<span class="attribute">background</span>: yellow;&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 详细</span></div><div class="line">@keyframes myfirst</div><div class="line">&#123;</div><div class="line">    0%   &#123;<span class="attribute">background</span>: red; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</div><div class="line">    25%  &#123;<span class="attribute">background</span>: yellow; <span class="attribute">left</span>:<span class="number">200px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</div><div class="line">    50%  &#123;<span class="attribute">background</span>: blue; <span class="attribute">left</span>:<span class="number">200px</span>; <span class="attribute">top</span>:<span class="number">200px</span>;&#125;</div><div class="line">    75%  &#123;<span class="attribute">background</span>: green; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">200px</span>;&#125;</div><div class="line">    100% &#123;<span class="attribute">background</span>: red; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@-webkit-keyframes myfirst /* Safari 与 Chrome */</div><div class="line">&#123;</div><div class="line">    0%   &#123;<span class="attribute">background</span>: red; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</div><div class="line">    25%  &#123;<span class="attribute">background</span>: yellow; <span class="attribute">left</span>:<span class="number">200px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</div><div class="line">    50%  &#123;<span class="attribute">background</span>: blue; <span class="attribute">left</span>:<span class="number">200px</span>; <span class="attribute">top</span>:<span class="number">200px</span>;&#125;</div><div class="line">    75%  &#123;<span class="attribute">background</span>: green; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">200px</span>;&#125;</div><div class="line">    100% &#123;<span class="attribute">background</span>: red; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="多列"><a href="#多列" class="headerlink" title="多列"></a>多列</h3><p>column-count</p><p>column-gap</p><p>column-rule-style</p><p>column-rule-width</p><p>column-rule-color</p><p>column-rule</p><p>column-span</p><p>column-width</p><h3 id="用户界面"><a href="#用户界面" class="headerlink" title="用户界面"></a>用户界面</h3><p>resize<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">resize</span>:both;</div></pre></td></tr></table></figure></p><p>box-sizing<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">box</span>-sizing:<span class="built_in">border</span>-<span class="built_in">box</span>;</div><div class="line">-moz-<span class="built_in">box</span>-sizing:<span class="built_in">border</span>-<span class="built_in">box</span>; <span class="comment">/* Firefox */</span></div></pre></td></tr></table></figure></p><p>outline-offset<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">outline-offset</span>:<span class="number">10px</span>;</div></pre></td></tr></table></figure></p><h3 id="弹性盒子-Flex-Box"><a href="#弹性盒子-Flex-Box" class="headerlink" title="弹性盒子(Flex Box)"></a>弹性盒子(Flex Box)</h3><p><a href="http://www.runoob.com/css3/css3-flexbox.html" target="_blank" rel="external">传送门</a></p><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">480px</span>) &#123;</div><div class="line">    <span class="selector-tag">body</span> &#123;</div><div class="line">        <span class="attribute">background-color</span>: lightgreen;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近想做一些UI组件，稍微复习一下CSS3的内容。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS3" scheme="/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>JS原生on和addEventListener优缺点</title>
    <link href="/2017/10/19/JS%E5%8E%9F%E7%94%9Fon%E5%92%8CaddEventListener%E4%BC%98%E7%BC%BA%E7%82%B9/"/>
    <id>/2017/10/19/JS原生on和addEventListener优缺点/</id>
    <published>2017-10-19T15:29:51.000Z</published>
    <updated>2017-10-19T15:38:06.527Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一直以来编程的时候对on和addEventListener的选择摇摆不定，这里稍微理清下知识点，解决实际开发中语句选择问题。<br><a id="more"></a></p></blockquote><p><em>转载</em></p><p><strong>为什么需要addEventListener？</strong></p><p>先来看一个片段：</p><p>html代码<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"box"</span>&gt;vinson-sheep&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure></p><p><strong>用on的代码</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line">  box.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"我是box1"</span>);</div><div class="line">  &#125;</div><div class="line">  box.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    box.style.fontSize = <span class="string">"18px"</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"我是box2"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">　　　　　运行结果：“我是box2”</div></pre></td></tr></table></figure></p><p>看到了吧，第二个onclick把第一个onclick给覆盖了，虽然大部分情况我们用on就可以完成我们想要的结果，但是有时我们又需要执行多个相同的事件，很明显如果用on完成不了我们想要的，那不用猜，你们肯定知道了，对！addEventListener可以多次绑定同一个事件并且不会覆盖上一个事件。</p><p><strong>用addEventListener的代码</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line">  box.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"我是box1"</span>);</div><div class="line">  &#125;)</div><div class="line">  box.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"我是box2"</span>);</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line">　　　　运行结果：我是box1</div><div class="line">　　　　　　　　　我是box2</div></pre></td></tr></table></figure></p><p>addEventListenert方法第一个参数填写事件名，注意不需要写on，第二个参数可以是一个函数，第三个参数是指在冒泡阶段还是捕获阶段处理事件处理程序,如果为true代表捕获阶段处理,如果是false代表冒泡阶段处理，第三个参数可以省略，大多数情况也不需要用到第三个参数,不写第三个参数默认false</p><p><strong>第三个参数的使用</strong></p><p>有时候的情况是这样的:<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">　　&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"box"</span>&gt;</div><div class="line">　　　　&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"child"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div><div class="line">　　&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure></p><p>如果我给box加click事件，如果我直接单击box没有什么问题，但是如果我单击的是child元素，那么它是怎么样执行的？（执行顺序）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">box.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"box"</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">child.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"child"</span>);</div><div class="line">&#125;)</div><div class="line">　　执行的结果：</div><div class="line">　　　　　　　　child</div><div class="line">　　　　　　　　box</div></pre></td></tr></table></figure></p><p>也就是说，默认情况事件是按照事件冒泡的执行顺序进行的。</p><p>如果第三个参数写的是true，则按照事件捕获的执行顺序进行的。</p><p><strong>事件冒泡执行过程：</strong></p><p>从最具体的的元素（你单击的那个元素）开始向上开始冒泡，拿我们上面的案例讲它的顺序是：child-&gt;box</p><p><strong>事件捕获执行过程：</strong></p><p>从最不具体的元素（最外面的那个盒子）开始向里面冒泡，拿我们上面的案例讲它的顺序是：box-&gt;child</p><p>以上这篇全面了解addEventListener和on的区别就是小编分享给大家的全部内容了，希望能给大家一个参考，也希望大家多多支持脚本之家。</p><p><a href="http://www.jb51.net/article/88570.htm" target="_blank" rel="external">参考文章——全面了解addEventListener和on的区别</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一直以来编程的时候对on和addEventListener的选择摇摆不定，这里稍微理清下知识点，解决实际开发中语句选择问题。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="/tags/javascript/"/>
    
      <category term="转载" scheme="/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Javascript中defer和async</title>
    <link href="/2017/10/16/Javascript%E4%B8%ADdefer%E5%92%8Casync/"/>
    <id>/2017/10/16/Javascript中defer和async/</id>
    <published>2017-10-15T16:29:54.000Z</published>
    <updated>2017-10-15T16:57:40.831Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>说实话defer和async属性是很少时候会用上。这篇文章就是讲述它如何如何难被用上。<br><a id="more"></a></p></blockquote><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p><strong>文档解析</strong>在web中指的是html文档被下载后由浏览器引擎解析为DOM节点树的过程。</p><p><strong>阻塞</strong>在web是指html文档解析受阻。当一个http请求被响应，首先下载html文件，再解析html文件。也就是说，html文件是肯定会被下载的，但是解析可能会受阻。</p><p>这里引用犀牛书的一段话：</p><blockquote><p>当HTML解析器遇到<code>&lt;script&gt;</code>元素时，它默认必须先执行脚本，然后再恢复文档的解析和渲染。这对于内联脚本没什么问题（这里大概是指不需要下载直接执行），但如果脚本源代码是一个由src属性指定的外部文件，这意味着脚本后面的文档部分在下载和执行脚本之前，都不会出现在浏览器中。</p></blockquote><p>作者在这里的表述很模糊，所谓“不会出现在浏览器中”，是指文档的文本内容已经载入，但是未被浏览器引擎解析为DOM树，而DOM树的生成是受Javascript代码执行的影响的，Javascript代码会“阻塞”页面UI的渲染。</p><p>脚本的执行只在默认情况下是同步和阻塞的。</p><h2 id="defer和async"><a href="#defer和async" class="headerlink" title="defer和async"></a>defer和async</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">"deferred.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"async.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>defer和async属性都像在告诉浏览器链接进来的脚本不会使用<code>document.write()</code>，也不会生成文档内容，因此浏览器可以在下载脚本时候继续解析和渲染文档。</p><p>defer属性使得浏览器延迟脚本的执行，直到文档的载入和解析完成，并可以操作。</p><p>async属性使得浏览器可以尽快地执行脚本，而不用在下载脚本时阻塞文档解析。</p><p>如果<code>&lt;script&gt;</code>标签同时有两个属性，同时支持两者的浏览器会遵从async属性并忽略defer属性。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>无论是defer和async属性，只有在脚本下载过程中可能阻塞文档解析的过程中才能够发挥作用，意味着<code>&lt;script&gt;</code>元素需要出现在文档一般元素之前（非html和body元素）。</p><p>在html和Javascript代码分离的哲学思想下，我们大多会把<code>&lt;script&gt;</code>元素放在文档底部，<code>html</code>和<code>body</code>元素之前。这时候defer和async属性就不能发挥作用了，因为js是同步解析的，当解析到<code>&lt;script&gt;</code>时，整个DOM树几乎已经解析完毕，并且渲染完成。</p><p>总的来讲，这两个元素用得不多，当<code>&lt;script&gt;</code>放在head时可能会用上。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;说实话defer和async属性是很少时候会用上。这篇文章就是讲述它如何如何难被用上。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>html+css+js前端学习网站推荐</title>
    <link href="/2017/10/14/html-css-js%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/"/>
    <id>/2017/10/14/html-css-js前端学习网站推荐/</id>
    <published>2017-10-14T14:52:17.000Z</published>
    <updated>2017-10-14T14:58:08.348Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>推荐一些前端学习网站。<br><a id="more"></a></p></blockquote><p>自学前端快一年了，就在这和大伙儿稍做分享吧。</p><p>HTML&amp;CSS学习网站：</p><ol><li>W3school<a href="http://www.w3school.com.cn/index.html" target="_blank" rel="external">http://www.w3school.com.cn/index.html</a> 这个不用多介绍</li><li>30天学习HTML&amp;CSS<a href="http://webdesign.tutsplus.com/courses/30-days-to-learn-html-css" target="_blank" rel="external">http://webdesign.tutsplus.com/courses/30-days-to-learn-html-css</a> 有视频，但是英文水平需要高</li><li>前端人的俱乐部<a href="http://f2er.club/" target="_blank" rel="external">http://f2er.club/</a> 感觉还不错，虽然我不经常上</li><li>编码规范<a href="http://zoomzhao.github.io/code-guide/" target="_blank" rel="external">http://zoomzhao.github.io/code-guide/</a> 编码规范很重要</li></ol><p>在你有了一定的HTML&amp;CSS基础后，我再介绍以下网站：</p><ol><li>CSS3动画<a href="http://webdesign.tutsplus.com/tutorials/creating-a-collection-of-css3-animated-pre-loaders--cms-21978" target="_blank" rel="external">http://webdesign.tutsplus.com/tutorials/creating-a-collection-of-css3-animated-pre-loaders--cms-21978</a></li><li>csdn博客<a href="http://m.blog.csdn.net/Column/Index?Channel=web&amp;Type=New" target="_blank" rel="external">http://m.blog.csdn.net/Column/Index?Channel=web&amp;Type=New</a></li><li>w3c<a href="http://www.w3cplus.com/" target="_blank" rel="external">http://www.w3cplus.com/</a></li><li>空智-博客园<a href="http://www.cnblogs.com/tugenhua0707/" target="_blank" rel="external">http://www.cnblogs.com/tugenhua0707/</a></li><li>智能社的视频教程<a href="http://www.zhinengshe.com/video.html" target="_blank" rel="external">http://www.zhinengshe.com/video.html</a></li><li>dowebok<a href="http://www.dowebok.com/" target="_blank" rel="external">http://www.dowebok.com/</a> 主要是jQuery</li><li>github<a href="https://github.com/" target="_blank" rel="external">https://github.com/</a> 这个不用说</li><li>codepen<a href="http://codepen.io/" target="_blank" rel="external">http://codepen.io/</a> 我超喜欢的一个网站</li></ol><p>到了这里，你也许想动手建个属于自己的网页，你又想问有哪些漂亮的网页？</p><ol><li>reeoo<a href="http://reeoo.com/" target="_blank" rel="external">http://reeoo.com/</a> 超多漂亮的网页</li><li>httpster<a href="http://httpster.net/" target="_blank" rel="external">http://httpster.net/</a></li></ol><p>你或许还想要些psd文件：</p><ol><li><a href="http://www.uipixels.com/page/2/" target="_blank" rel="external">http://www.uipixels.com/page/2/</a></li><li><a href="http://www.bestpsdfreebies.com/" target="_blank" rel="external">http://www.bestpsdfreebies.com/</a></li></ol><p>作者：小老师<br>链接：<a href="https://www.zhihu.com/question/46939006/answer/103731361" target="_blank" rel="external">https://www.zhihu.com/question/46939006/answer/103731361</a><br>来源：知乎</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;推荐一些前端学习网站。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="学习指导" scheme="/tags/%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%AF%BC/"/>
    
  </entry>
  
  <entry>
    <title>js中RegExp引用方法详解</title>
    <link href="/2017/10/14/js%E4%B8%ADRegExp%E5%BC%95%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <id>/2017/10/14/js中RegExp引用方法详解/</id>
    <published>2017-10-14T10:43:13.000Z</published>
    <updated>2017-10-14T11:10:32.754Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>归纳总结一些能够引用RegExp的方法，包括正则表达式对象的属性。<br><a id="more"></a></p></blockquote><h2 id="String方法"><a href="#String方法" class="headerlink" title="String方法"></a>String方法</h2><ol><li>search()</li><li>replace()</li><li>match()</li><li>split()</li></ol><h2 id="RegExp对象属性"><a href="#RegExp对象属性" class="headerlink" title="RegExp对象属性"></a>RegExp对象属性</h2><ol><li>source</li><li>global</li><li>ingoreCase</li><li>multiline</li><li>lastIndex</li></ol><h2 id="RegExp对象方法"><a href="#RegExp对象方法" class="headerlink" title="RegExp对象方法"></a>RegExp对象方法</h2><ol><li>exec()</li><li>test()</li></ol><hr><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><h3 id="lastIndex"><a href="#lastIndex" class="headerlink" title="lastIndex"></a>lastIndex</h3><p>lastIndex是一个可读/可写的整数。在全局模式下使用exec()或者test()，会调用lastIndex属性，如果它找到一个匹配结果，那么它就立即设置lastIndex为当前匹配字串的结束位置。</p><h3 id="exec-和test"><a href="#exec-和test" class="headerlink" title="exec()和test()"></a>exec()和test()</h3><p>其实这两个函数行为是一致的，在全局模式g下能够引用RegExp对象的lastIndex属性。我们可以看下面的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 定一个字符串</span></div><div class="line"><span class="keyword">var</span> s = <span class="string">"123"</span>;</div><div class="line"><span class="comment">// 声明一个正则表达式</span></div><div class="line"><span class="keyword">var</span> pattern = <span class="regexp">/\d/g</span>;</div><div class="line"><span class="comment">// 匹配的是1，返回true</span></div><div class="line">pattern.test(s);</div><div class="line"><span class="comment">// 匹配的是2，返回"2"</span></div><div class="line">pattern.exec(s)</div><div class="line"><span class="comment">// lastIndex经过两次递增后为2</span></div><div class="line">pattern.lastIndex;  <span class="comment">// =&gt; 2</span></div></pre></td></tr></table></figure></p><p>值得注意的是，全局模式下使用test()或者exec()时，如果没有匹配到任何内容，则返回<code>null</code>，同时lastIndex会自动刷新为0。当然lastIndex是可以显示更改的。</p><h3 id="exec-和match"><a href="#exec-和match" class="headerlink" title="exec()和match()"></a>exec()和match()</h3><p>这两个函数在没有匹配项的时候会返回<code>null</code>，否则一律返回数组，即使只有一个匹配项。</p><p>exec()不能够一次得到所有匹配项。如果需要获取字符串所有的匹配项，需要在全局模式g下使用循环，这时候函数会自动调用lastIndex属性。当函数返回为<code>null</code>，证明已经遍历了整个字符串。</p><p>match()能够一次得到一个由所有匹配项得到的数组。分组()只要不影响正则表达式的逻辑，不会对输出结果个数造成影响。<br><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">//</span> 无分组</div><div class="line"><span class="string">"abcabc"</span><span class="string">.match</span><span class="params">(/abc/g)</span>;   <span class="string">//</span> =&gt; [<span class="string">"abc"</span>, <span class="string">"abc"</span>]</div><div class="line"><span class="string">//</span> 分组</div><div class="line"><span class="string">"abcabc"</span><span class="string">.match</span><span class="params">(/(abc)</span><span class="string">/g</span>); <span class="string">//</span> =&gt; [<span class="string">"abc"</span>, <span class="string">"abc"</span>]</div></pre></td></tr></table></figure></p><p>综合地说，exec()适合获取分组，match()适合一次获取所有的匹配项。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;归纳总结一些能够引用RegExp的方法，包括正则表达式对象的属性。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="/tags/javascript/"/>
    
      <category term="RegExp" scheme="/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>js正则表达式的多行模式和单行模式</title>
    <link href="/2017/10/14/js%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%A4%9A%E8%A1%8C%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%8D%95%E8%A1%8C%E6%A8%A1%E5%BC%8F/"/>
    <id>/2017/10/14/js正则表达式的多行模式和单行模式/</id>
    <published>2017-10-14T07:05:42.000Z</published>
    <updated>2017-10-14T08:05:42.914Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考了一些文章，对js正则表达式的多行模式和单行模式有了更深的了解。<br><a id="more"></a></p></blockquote><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>其实底部的文章已经把多行模式和单行模式的关系讲述得很透彻了，但是它是针对php和Expresso，在js环境下的正则表现会有差异。多行模式在犀牛书的描述其实也是相当简洁明了的：</p><blockquote><p>修饰符“m”用以在多行模式中执行匹配，在这种模式下，如果检索的字符串包含多行，那么^和$锚字符除了匹配整个字符串的开始和结尾之外，还能匹配每行的开始和结尾。</p></blockquote><p>书上这么说，但到底是怎么一种情况呢？</p><h2 id="文本保存的方式"><a href="#文本保存的方式" class="headerlink" title="文本保存的方式"></a>文本保存的方式</h2><p>首先我们来思考一个问题，当我们在win上的txt文本上敲一个回车然后保存，那文件对回车的保存是如何实现的？</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ohkgqh4gv.bkt.clouddn.com/1507965279%281%29.png" alt="比如我在这输入点东西" title="">                </div>                <div class="image-caption">比如我在这输入点东西</div>            </figure><p>知识点：<code>\r</code>为回车符，<code>\n</code>为换行符。</p><p>在windows中，我们平常说的换行，实质上是先回车，后换行。</p><p>所以上图的文本等价于<code>1abcde\r\n2abc\r\n3eeeee\r\n</code>。</p><p>我们可以基于上面的讨论，在js中模拟多行文本。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>真实的测试是需要调用本地或者网络文件，读取里面的内容再进行多行匹配。</p><p>为了便于测试，我们使用<code>1abcde\r\n2abc\r\n3eeeee\r\n</code>进行测试。</p><p>下面的测试代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> pattern = <span class="regexp">/^(\d\w+)$/mg</span>;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> item = <span class="string">"1abcde\r\n2abc\r\n3eeeeee"</span>;</span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> item1 = <span class="string">"1abcde\n2abc\n3eeeeee"</span>;</span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> item2 = <span class="string">"1abcde\r2abc\r3eeeeee"</span>;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="built_in">console</span>.log(item.match(pattern));</span></div><div class="line"><span class="javascript">    <span class="built_in">console</span>.log(item1.match(pattern));</span></div><div class="line"><span class="javascript">    <span class="built_in">console</span>.log(item2.match(pattern));</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p><p>输出结果：<code>[&quot;1abcde&quot;, &quot;2abc&quot;, &quot;3eeeeee&quot;]</code></p><p>分析： 如果你阅读了尾部的文章，你会发现输出结果差异非常大，后面会讨论这个问题。在这个例子中，我们分别测试了混合使用<code>\r\n</code>与单独使用<code>\r</code>和<code>\n</code>的情况，结果输出均为<code>[&quot;1abcde&quot;, &quot;2abc&quot;, &quot;3eeeeee&quot;]</code>。这表明，js多行模式下，<code>\n</code>和<code>\r</code>表现是相同的，<code>^</code>和<code>$</code>这两个锚元素都可以定位<code>\n</code>和<code>\r</code>前后。</p><h2 id="对-符号的影响"><a href="#对-符号的影响" class="headerlink" title="对 . 符号的影响"></a>对 . 符号的影响</h2><p>我们将上面的代码修改一下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">    <span class="keyword">var</span> pattern = <span class="regexp">/^.$/gm</span>;</span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> item = <span class="string">"a"</span>;</span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> item1 = <span class="string">"\n"</span>;</span></div><div class="line"><span class="actionscript">    <span class="keyword">var</span> item2 = <span class="string">"\r"</span>;</span></div><div class="line"><span class="javascript">    <span class="built_in">console</span>.log(item.match(pattern));</span></div><div class="line"><span class="javascript">    <span class="built_in">console</span>.log(item1.match(pattern));</span></div><div class="line"><span class="javascript">    <span class="built_in">console</span>.log(item2.match(pattern));</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p><p>输出结果：<code>[&quot;a&quot;]</code>、<code>null</code>、<code>null</code>。</p><p>那是不是表明多行模式下<code>.</code>不能匹配<code>\n\r</code>呢？别急，我们将代码再改改：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var pattern</span> = /^.$/g;</div></pre></td></tr></table></figure></p><p>输出结果：<code>[&quot;a&quot;]</code>、<code>null</code>、<code>null</code>。</p><p>结果令人有点惊讶，单双行模式下<code>.</code>的表现是一致的。如果查看尾部文章，可以发现测试结果与尾部文章的差异甚大。</p><p><em>为什么要做这个测试？因为参考文章提及到这个问题</em></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ol><li>多行模式会影响<code>^</code>和<code>$</code>的匹配，而且对<code>\n</code>和<code>\r</code>的表现是一样的。</li><li>正则表达式中的<code>.</code>符号是不能够匹配<code>\n</code>和<code>\r</code>，无论是单行还是多行模式下。</li><li>php和Expresso对正则的实现与js的差异非常大，要理解语言的特殊性。</li></ol><p>传送门：</p><p><a href="http://blog.csdn.net/zm2714/article/details/7925264" target="_blank" rel="external">正则表达式的多行模式与单行模式</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;参考了一些文章，对js正则表达式的多行模式和单行模式有了更深的了解。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="/tags/javascript/"/>
    
      <category term="RegExp" scheme="/tags/RegExp/"/>
    
      <category term="原创" scheme="/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法复习</title>
    <link href="/2017/10/14/markdown%E8%AF%AD%E6%B3%95%E5%A4%8D%E4%B9%A0/"/>
    <id>/2017/10/14/markdown语法复习/</id>
    <published>2017-10-13T21:04:23.000Z</published>
    <updated>2017-10-13T21:14:05.871Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近写文章的时候老需要用markdown写表格的情况，一想到markdown表格需要很多|和-我就头疼了。写篇文章复习下。<br><a id="more"></a></p></blockquote><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 一级标题</span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 二级标题</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 三级标题</span></span></div></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1.</div><div class="line">2.</div><div class="line">3.</div><div class="line"></div><div class="line"><span class="bullet">- </span>a</div><div class="line"><span class="bullet">- </span>b</div><div class="line"><span class="bullet">- </span>c</div><div class="line"></div><div class="line"><span class="bullet">* </span>a</div><div class="line"><span class="bullet">* </span>b</div><div class="line"><span class="bullet">* </span>c</div></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> aaa</span></div></pre></td></tr></table></figure><h2 id="图片与链接"><a href="#图片与链接" class="headerlink" title="图片与链接"></a>图片与链接</h2><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml">![]()</span><span class="template-variable">&#123;ImgCap&#125;</span><span class="xml"></span><span class="template-tag">&#123;/<span class="name">ImgCap</span>&#125;</span><span class="xml"></span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml">[]()</span></div></pre></td></tr></table></figure><h2 id="粗体与斜体"><a href="#粗体与斜体" class="headerlink" title="粗体与斜体"></a>粗体与斜体</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*<span class="strong">*strong*</span><span class="strong">*</span></div><div class="line"><span class="strong">*</span>italic*</div></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="params">| Tables        |</span> Are           <span class="params">| Cool  |</span></div><div class="line"><span class="params">| ------------- |</span><span class="symbol">:-------------</span><span class="symbol">:|</span> -----<span class="symbol">:|</span></div><div class="line"><span class="params">| col 3 is      |</span> right-aligned <span class="params">| $1600 |</span></div><div class="line"><span class="params">| col 2 is      |</span> centered      <span class="params">|   $12 |</span></div><div class="line"><span class="params">| zebra stripes |</span> are neat      <span class="params">|    $1 |</span></div></pre></td></tr></table></figure><p><code>:</code>不同位置代表不同的对齐方式。</p><p>参考文章:<br><a href="http://www.jianshu.com/p/1e402922ee32/" target="_blank" rel="external">Markdown——入门指南</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近写文章的时候老需要用markdown写表格的情况，一想到markdown表格需要很多|和-我就头疼了。写篇文章复习下。&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="markdown" scheme="/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>JS正则表达式RegExp语法</title>
    <link href="/2017/10/14/JS%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8FRegExp%E8%AF%AD%E6%B3%95/"/>
    <id>/2017/10/14/JS正则表达式RegExp语法/</id>
    <published>2017-10-13T19:49:35.000Z</published>
    <updated>2017-10-13T21:00:56.405Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JS的正则表达式实际上是一套精密的选择器。实际上各种语言的正则表达式都十分相似，但当正则放在JS实现上就有细微的差异，这些差异会在文章中略微谈到。<br><a id="more"></a></p></blockquote><p><em>文章大部分摘录自犀牛书</em></p><p>javascript中正则表达式使用RegExp对象表示，可以使用RegExp()构造函数来创建RegExp对象，不过RegExp对象更多是通过一种特殊的直接量语法来创建。<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">var pattern</span> = /s$/;</div></pre></td></tr></table></figure></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="直接量字符"><a href="#直接量字符" class="headerlink" title="直接量字符"></a>直接量字符</h3><table><thead><tr><th>字符</th><th>匹配</th></tr></thead><tbody><tr><td>字母和数字字符</td><td>自身</td></tr><tr><td>\o</td><td>NUL字符（\u0000）</td></tr><tr><td>\t</td><td>制表符（\u0009）</td></tr><tr><td>\n</td><td>换行符（\u000A）</td></tr><tr><td>\v</td><td>垂直制表符（\u000B）</td></tr><tr><td>\f</td><td>换页符（\u000C）</td></tr><tr><td>\r</td><td>回车符（\u000D）</td></tr><tr><td>\xnn</td><td>由十六进制数nn指定的拉丁字符，例如，\x0A等价于\n</td></tr><tr><td>\cX</td><td>控制字符^X，例如，\cJ等价于换行符\n</td></tr></tbody></table><p>在正则表达式中，许多标点符号具有特殊含义，它们是：</p><p><code>^ $ . * ? = ! : \ / ( ) [ ] { }</code></p><p>表格中经常使用的应该是<code>\n</code>,<code>\r</code>。</p><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类[]"></a>字符类[]</h3><p>将直接量字符串单独放进方括号内就组成了字符类。</p><p>注意，有些字符类转义字符只能匹配ASCII字符，还没扩展到可以处理Unicode字符，但可以通过十六进制表示方法来显式定义Unicode字符类。</p><table><thead><tr><th>字符</th><th>匹配</th></tr></thead><tbody><tr><td>[…]</td><td>方括号内任意字符</td></tr><tr><td>[^…]</td><td>不在方括号内的任意字符</td></tr><tr><td>.</td><td>除换行符和其他Unicode行终止符之外的任意字符</td></tr><tr><td>\w</td><td>任何ASCII字符组成的单词，等价于[a-zA-Z0-9]</td></tr><tr><td>\W</td><td>等价于[^a-zA-Z0-9]</td></tr><tr><td>\s</td><td>任何Unicode空白符</td></tr><tr><td>\S</td><td>任何非Unicode空白符的字符，注意\w和\S不同</td></tr><tr><td>\d</td><td>任何ASCII数字，等价于[0-9]</td></tr><tr><td>\D</td><td>除了ASCII数字之外的任何字符，等价于[^0-9]</td></tr><tr><td>[\b]</td><td>退格直接量(特例)</td></tr></tbody></table><h3 id="重复"><a href="#重复" class="headerlink" title="重复{}"></a>重复{}</h3><table><thead><tr><th>字符</th><th>匹配</th></tr></thead><tbody><tr><td>{n,m}</td><td>匹配前一项至少n次，但不能超过m次</td></tr><tr><td>{n,}</td><td>匹配前一项n次或者更多次</td></tr><tr><td>{n}</td><td>匹配前一项n次</td></tr><tr><td>?</td><td>{0,1}</td></tr><tr><td>+</td><td>{1,}</td></tr><tr><td>*</td><td>{0,}</td></tr></tbody></table><h4 id="非贪婪的重复"><a href="#非贪婪的重复" class="headerlink" title="非贪婪的重复"></a>非贪婪的重复</h4><p>上表列出的匹配重复字符是尽可能地多匹配，而且允许后续的正则表达式继续匹配。因此，我们称之为<strong>“贪婪的”匹配</strong>。我们同样可以使用正则表达式进行非贪婪匹配。只须在等匹配的字符后跟随一个问号即可：<code>“??”、“+?”、“*?”</code>或者<code>“{1,5}?”</code>。比如，正则表达式/a+/可以匹配一个或多个连续的字幕a。当使用“aaa”作为匹配时，正则表达式会匹配它的三个字符。但是/a+?/也可以匹配一个或多个连续字母a，但它<strong>尽可能少地匹配</strong>。我们同样将“aaa”作为匹配字符串，但后一个模式只能匹配一个a。</p><h3 id="选择-、分组-和引用"><a href="#选择-、分组-和引用" class="headerlink" title="选择|、分组()和引用$"></a>选择|、分组()和引用$</h3><h4 id="选择"><a href="#选择" class="headerlink" title="选择|"></a>选择|</h4><p>字符“|”用于分隔供选择的字符。例如，<code>/ab|cd|ef/</code>可以匹配字符串“ab”，也可以匹配字符串“cd,还可以匹配字符串“ef”。</p><h4 id="分组"><a href="#分组" class="headerlink" title="分组()"></a>分组()</h4><p>正则表达式中的圆括号有多种作用。</p><ol><li>第一个作用是单独的项组合成子表达式，以便可以像处理一个独立的单元那样用“|”、“*”、“+”或者“?”等来对单元内的项进行处理。</li><li>圆括号的另一个作用是在完整的模式中定义子模式。</li><li>最后一个作用是允许在同一正则表达式的后部引用前面的子表达式。</li></ol><p><strong>关于最后一个作用：</strong><br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/(['"])[^'<span class="string">"]*\1/</span></div></pre></td></tr></table></figure></p><p><code>\1</code>是对<code>([&#39;&quot;])</code>的引用。</p><p>值得注意的是，对正则表达式中前一个子表达式的引用，并不是指对子表达式模式的引用，而指的是与那个模式相匹配的文本的引用。所以，假如<code>([&#39;&quot;])</code>匹配到<code>&quot;</code>，则<code>\1</code>指代的是<code>&quot;</code>，而不能是<code>&#39;</code>。</p><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>一竖</td><td>选择符</td></tr><tr><td>(…)</td><td>分组</td></tr><tr><td>(?:…)</td><td>只组合，把项组合到一个单元，但不记忆与改组相匹配的字符</td></tr></tbody></table><h4 id="引用"><a href="#引用" class="headerlink" title="引用$"></a>引用$</h4><p>像<code>\b</code>这样的元素不匹配某个可见的字符，它们指定匹配发生的合法位置。有时我们称这些元素为正则表达式的锚，因为它们将模式定位在搜索字符串的特定位置上。**最常用的锚元素是<code>^</code>，它用来匹配字符串的开始，锚元素<code>$</code>用以匹配字符串的结束。</p><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>^</td><td>匹配开头，在多行检索中，匹配一行的开头</td></tr><tr><td>$</td><td>匹配字符串的结尾，在多行检索中，匹配一行的结尾</td></tr><tr><td>\b</td><td>匹配边界</td></tr><tr><td>\B</td><td>匹配非边界</td></tr><tr><td>(?=p)</td><td>零宽正向先行断言</td></tr><tr><td>(?!p)</td><td>零宽负向先行断言</td></tr></tbody></table><p><em>具体看犀牛书p260~261</em></p><p>特别需要注意的是，js是不支持<code>(?!p)</code>。</p><p><code>\b</code>指代位于字符<code>\w</code>和<code>\W</code>之间的位置。</p><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/<span class="symbol">\b</span>java<span class="symbol">\b</span>/i</div></pre></td></tr></table></figure><p>修饰符“i”用以说明模式匹配是不区分大小写的。修饰符“g”说明模式匹配应该是全局的，也就是说，应该找出被检索字符串中所有的匹配。修饰符“m”用以在多行模式中执行匹配，在这种模式下，如果待检索的字符串包含多行，那么<code>^</code>和<code>$</code>锚字符除了匹配整个字符串的开头和结尾之外，还能匹配每行的开始和结尾。</p><p>关于多行模式，我会在下一篇文章中详解。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;JS的正则表达式实际上是一套精密的选择器。实际上各种语言的正则表达式都十分相似，但当正则放在JS实现上就有细微的差异，这些差异会在文章中略微谈到。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="/tags/javascript/"/>
    
      <category term="RegExp" scheme="/tags/RegExp/"/>
    
  </entry>
  
</feed>
